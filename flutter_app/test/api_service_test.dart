import 'package:flutter_test/flutter_test.dart';
import 'package:dio/dio.dart';
import 'package:mockito/annotations.dart';
import 'package:mockito/mockito.dart';
import 'package:petcarehub_app/services/api_service.dart';
import 'api_service_test.mocks.dart'; // Generated by build_runner

@GenerateMocks([Dio])
void main() {
  group('ApiService', () {
    late MockDio mockDio;
    late ApiService apiService;

    setUp(() {
      mockDio = MockDio();
      // Inject the mock Dio instance using the named constructor
      apiService = ApiService.withDio('http://mockapi.com', mockDio);
    });

    test('fetchTasks returns a list of tasks if successful', () async {
      when(mockDio.get(
        any,
        options: anyNamed('options'),
      )).thenAnswer((_) async => Response(
            requestOptions: RequestOptions(path: 'http://mockapi.com/tasks'),
            data: [
              {'id': 1, 'title': 'Test Task 1', 'status': 'pending'},
              {'id': 2, 'title': 'Test Task 2', 'status': 'completed'}
            ],
            statusCode: 200,
          ));

      final tasks = await apiService.fetchTasks('dummy_token');

      expect(tasks, isA<List<Map<String, dynamic>>>());
      expect(tasks.length, 2);
      expect(tasks[0]['title'], 'Test Task 1');
      verify(mockDio.get('http://mockapi.com/tasks', options: anyNamed('options'))).called(1);
    });

    test('fetchTasks throws exception if API call fails with 500', () async {
      when(mockDio.get(
        any,
        options: anyNamed('options'),
      )).thenThrow(
        DioException(
          requestOptions: RequestOptions(path: 'http://mockapi.com/tasks'),
          response: Response(requestOptions: RequestOptions(path: ''), statusCode: 500),
          type: DioExceptionType.badResponse,
          error: 'Server Error',
        ),
      );

      expect(() => apiService.fetchTasks('dummy_token'), throwsA(isA<Exception>()));
      verify(mockDio.get('http://mockapi.com/tasks', options: anyNamed('options'))).called(1);
    });

    test('fetchTasks throws Unauthorized exception for 401', () async {
      when(mockDio.get(
        any,
        options: anyNamed('options'),
      )).thenThrow(
        DioException(
          requestOptions: RequestOptions(path: 'http://mockapi.com/tasks'),
          response: Response(requestOptions: RequestOptions(path: ''), statusCode: 401),
          type: DioExceptionType.badResponse,
          error: 'Unauthorized',
        ),
      );

      expect(() => apiService.fetchTasks('dummy_token'), throwsA(predicate((e) => e is Exception && e.toString().contains('Unauthorized'))));
      verify(mockDio.get('http://mockapi.com/tasks', options: anyNamed('options'))).called(1);
    });
  });
}
